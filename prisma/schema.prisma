// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  extensions = [vector]
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  password      String
  role          String          @default("agent") // "admin", "agent"
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  sessions      Session[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model ChatraAccount {
  id            String        @id @default(cuid())
  name          String        // Friendly name for the account
  chatraId      String        @unique @map("chatra_id") // Chatra account ID
  apiKey        String        @map("api_key") // Chatra private API key
  publicApiKey  String?       @map("public_api_key") // Public API key for Chatra.Simple authentication
  webhookSecret String        @map("webhook_secret") // Webhook verification secret
  isActive      Boolean       @default(true) @map("is_active")
  
  // Optional agent information for message sending
  agentId       String?       @map("agent_id") // Specific Chatra agent ID
  agentEmail    String?       @map("agent_email") // Agent email for creating dummy agents
  
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  
  conversations Conversation[]
  
  @@map("chatra_accounts")
}

model Conversation {
  id              String         @id @default(cuid())
  chatraConversationId String    @unique @map("chatra_conversation_id") // ID from Chatra
  chatraAccountId String         @map("chatra_account_id")
  clientName      String?        @map("client_name")
  clientEmail     String?        @map("client_email")
  status          String         @default("active") // "active", "closed", "waiting"
  lastMessageAt   DateTime?      @map("last_message_at")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  
  chatraAccount   ChatraAccount  @relation(fields: [chatraAccountId], references: [id], onDelete: Cascade)
  messages        Message[]
  
  @@map("conversations")
}

model Message {
  id               String        @id @default(cuid())
  conversationId   String        @map("conversation_id")
  chatraMessageId  String?       @map("chatra_message_id") // ID from Chatra, null for LLM messages
  content          String
  senderType       String        @map("sender_type") // "client", "agent", "llm"
  senderName       String?       @map("sender_name")
  messageType      String        @default("text") @map("message_type") // "text", "image", "file"
  retrievedContext String?       @map("retrieved_context") @db.Text // JSON string of retrieved context for auditing
  confidence       Float?        // LLM confidence score
  isApproved       Boolean?      @map("is_approved") // null = pending, true = approved, false = rejected
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  
  conversation     Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  content     String   @db.Text // The text content chunk
  source      String   // "chatra_conversation", "email", "manual"
  sourceId    String?  @map("source_id") // Reference to original source (conversation ID, email ID, etc.)
  metadata    Json?    // Additional metadata (conversation date, participants, tags, etc.)
  embedding   String   @db.Text // Vector stored as text, converted in app code
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("knowledge_base")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
} 